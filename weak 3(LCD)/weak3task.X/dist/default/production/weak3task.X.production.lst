

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Dec 22 15:18:55 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171                           
   172                           	psect	idataBANK0
   173     072D                     __pidataBANK0:
   174                           
   175                           ;initializer for _array
   176     072D  344D               	retlw	77
   177     072E  3441               	retlw	65
   178     072F  3447               	retlw	71
   179     0730  3445               	retlw	69
   180     0731  3453               	retlw	83
   181     0732  3448               	retlw	72
   182     0733  3400               	retlw	0
   183     0734  3400               	retlw	0
   184     0735  3400               	retlw	0
   185     0736  3400               	retlw	0
   186     0737  3400               	retlw	0
   187     0738  3400               	retlw	0
   188     0739  3400               	retlw	0
   189     073A  3400               	retlw	0
   190     073B  3400               	retlw	0
   191     073C  3400               	retlw	0
   192     073D  3400               	retlw	0
   193     073E  3400               	retlw	0
   194                           
   195                           ;initializer for _cmd2
   196     073F  34CD               	retlw	205
   197     0740  34CC               	retlw	204
   198     0741  34CB               	retlw	203
   199     0742  34CA               	retlw	202
   200     0743  34C9               	retlw	201
   201     0744  34C8               	retlw	200
   202                           
   203                           ;initializer for _cmd1
   204     0745  3482               	retlw	130
   205     0746  3483               	retlw	131
   206     0747  3484               	retlw	132
   207     0748  3485               	retlw	133
   208     0749  3486               	retlw	134
   209     074A  3487               	retlw	135
   210     0008                     _PORTD	set	8
   211     0038                     _RC0	set	56
   212     003B                     _RC3	set	59
   213     0088                     _TRISD	set	136
   214     0087                     _TRISC	set	135
   215                           
   216                           	psect	cinit
   217     07EB                     start_initialization:	
   218                           ; #config settings
   219                           
   220     07EB                     __initialization:
   221                           
   222                           ; Initialize objects allocated to BANK0
   223     07EB  1383               	bcf	3,7	;select IRP bank0
   224     07EC  303E               	movlw	low (__pdataBANK0+30)
   225     07ED  00FD               	movwf	btemp+-1
   226     07EE  3007               	movlw	high __pidataBANK0
   227     07EF  00FE               	movwf	btemp
   228     07F0  302D               	movlw	low __pidataBANK0
   229     07F1  00FF               	movwf	btemp+1
   230     07F2  3020               	movlw	low __pdataBANK0
   231     07F3  0084               	movwf	4
   232     07F4  120A  118A  26E4  120A  118A  	fcall	init_ram0
   233                           
   234                           ; Clear objects allocated to COMMON
   235     07F9  01F7               	clrf	__pbssCOMMON& (0+127)
   236     07FA  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   237     07FB  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   238     07FC                     end_of_initialization:	
   239                           ;End of C runtime variable initialization code
   240                           
   241     07FC                     __end_of__initialization:
   242     07FC  0183               	clrf	3
   243     07FD  120A  118A  2F7E   	ljmp	_main	;jump to C main() function
   244                           
   245                           	psect	bssCOMMON
   246     0077                     __pbssCOMMON:
   247     0077                     _j:
   248     0077                     	ds	1
   249     0078                     _i:
   250     0078                     	ds	1
   251     0079                     _x:
   252     0079                     	ds	1
   253                           
   254                           	psect	dataBANK0
   255     0020                     __pdataBANK0:
   256     0020                     _array:
   257     0020                     	ds	18
   258     0032                     _cmd2:
   259     0032                     	ds	6
   260     0038                     _cmd1:
   261     0038                     	ds	6
   262                           
   263                           	psect	inittext
   264     06E0                     init_fetch0:	
   265                           ;	Called with low address in FSR and high address in W
   266                           
   267     06E0  087E               	movf	btemp,w
   268     06E1  008A               	movwf	10
   269     06E2  087F               	movf	btemp+1,w
   270     06E3  0082               	movwf	2
   271     06E4                     init_ram0:	
   272                           ;Called with:
   273                           ;	high address of idata address in btemp 
   274                           ;	low address of idata address in btemp+1 
   275                           ;	low address of data in FSR
   276                           ;	high address + 1 of data in btemp-1
   277                           
   278     06E4  120A  118A  26E0  120A  118A  	fcall	init_fetch0
   279     06E9  0080               	movwf	0
   280     06EA  0A84               	incf	4,f
   281     06EB  0804               	movf	4,w
   282     06EC  067D               	xorwf	btemp+-1,w
   283     06ED  1903               	btfsc	3,2
   284     06EE  3400               	retlw	0
   285     06EF  0AFF               	incf	btemp+1,f
   286     06F0  1903               	btfsc	3,2
   287     06F1  0AFE               	incf	btemp,f
   288     06F2  2EE4               	goto	init_ram0
   289                           
   290                           	psect	cstackCOMMON
   291     0070                     __pcstackCOMMON:
   292     0070                     ?_init:
   293     0070                     ?_lcdcmd:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ??_lcdcmd:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ?_lcddata:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ??_lcddata:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ?_main:	
   306                           ; 1 bytes @ 0x0
   307                           
   308                           
   309                           ; 1 bytes @ 0x0
   310     0070                     	ds	2
   311     0072                     lcdcmd@i:
   312     0072                     lcddata@i:	
   313                           ; 1 bytes @ 0x2
   314                           
   315                           
   316                           ; 1 bytes @ 0x2
   317     0072                     	ds	1
   318     0073                     ??_init:
   319                           
   320                           ; 1 bytes @ 0x3
   321     0073                     	ds	2
   322     0075                     ??_main:
   323                           
   324                           ; 1 bytes @ 0x5
   325     0075                     	ds	2
   326                           
   327                           	psect	maintext
   328     077E                     __pmaintext:	
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 28 in file "task.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;		None
   339 ;; Return value:  Size  Location     Type
   340 ;;                  1    wreg      void 
   341 ;; Registers used:
   342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   343 ;; Tracked objects:
   344 ;;		On entry : B00/0
   345 ;;		On exit  : 0/0
   346 ;;		Unchanged: 0/0
   347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   348 ;;      Params:         0       0       0       0       0
   349 ;;      Locals:         0       0       0       0       0
   350 ;;      Temps:          2       0       0       0       0
   351 ;;      Totals:         2       0       0       0       0
   352 ;;Total ram usage:        2 bytes
   353 ;; Hardware stack levels required when called: 2
   354 ;; This function calls:
   355 ;;		_init
   356 ;;		_lcdcmd
   357 ;;		_lcddata
   358 ;; This function is called by:
   359 ;;		Startup code after reset
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363     077E                     _main:	
   364                           ;psect for function _main
   365                           
   366     077E                     l695:	
   367                           ;incstack = 0
   368                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   369                           
   370                           
   371                           ;task.c: 30:     init();
   372     077E  120A  118A  274B  120A  118A  	fcall	_init
   373     0783                     l697:
   374                           
   375                           ;task.c: 31:     for(x=0;x<6;x++)
   376     0783  01F9               	clrf	_x
   377     0784                     l703:
   378                           
   379                           ;task.c: 32:     {;task.c: 33:      lcdcmd(cmd1[x]);
   380     0784  0879               	movf	_x,w
   381     0785  3E38               	addlw	(low (_cmd1| 0))& (0+255)
   382     0786  0084               	movwf	4
   383     0787  1383               	bcf	3,7	;select IRP bank0
   384     0788  0800               	movf	0,w
   385     0789  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   386     078E                     l705:
   387                           
   388                           ;task.c: 35:      _delay((unsigned long)((100)*(6000000/4000.0)));
   389     078E  30C3               	movlw	195
   390     078F  00F6               	movwf	??_main+1
   391     0790  30CD               	movlw	205
   392     0791  00F5               	movwf	??_main
   393     0792                     u57:
   394     0792  0BF5               	decfsz	??_main,f
   395     0793  2F92               	goto	u57
   396     0794  0BF6               	decfsz	??_main+1,f
   397     0795  2F92               	goto	u57
   398     0796                     l707:
   399                           
   400                           ;task.c: 36:      lcddata(array[x]);
   401     0796  0879               	movf	_x,w
   402     0797  3E20               	addlw	(low (_array| 0))& (0+255)
   403     0798  0084               	movwf	4
   404     0799  1383               	bcf	3,7	;select IRP bank0
   405     079A  0800               	movf	0,w
   406     079B  120A  118A  2710  120A  118A  	fcall	_lcddata
   407                           
   408                           ;task.c: 38:       _delay((unsigned long)((100)*(6000000/4000.0)));
   409     07A0  30C3               	movlw	195
   410     07A1  00F6               	movwf	??_main+1
   411     07A2  30CD               	movlw	205
   412     07A3  00F5               	movwf	??_main
   413     07A4                     u67:
   414     07A4  0BF5               	decfsz	??_main,f
   415     07A5  2FA4               	goto	u67
   416     07A6  0BF6               	decfsz	??_main+1,f
   417     07A7  2FA4               	goto	u67
   418     07A8                     l709:
   419                           
   420                           ;task.c: 40:     }
   421     07A8  3001               	movlw	1
   422     07A9  00FF               	movwf	btemp+1
   423     07AA  087F               	movf	btemp+1,w
   424     07AB  07F9               	addwf	_x,f
   425     07AC                     l711:
   426     07AC  3006               	movlw	6
   427     07AD  0279               	subwf	_x,w
   428     07AE  1C03               	skipc
   429     07AF  2FB1               	goto	u31
   430     07B0  2FB2               	goto	u30
   431     07B1                     u31:
   432     07B1  2F84               	goto	l703
   433     07B2                     u30:
   434     07B2                     l713:
   435                           
   436                           ;task.c: 41:     for(j=0;j<6;j++)
   437     07B2  01F7               	clrf	_j
   438     07B3                     l719:
   439                           
   440                           ;task.c: 42:     {;task.c: 43:      lcdcmd(cmd2[j]);
   441     07B3  0877               	movf	_j,w
   442     07B4  3E32               	addlw	(low (_cmd2| 0))& (0+255)
   443     07B5  0084               	movwf	4
   444     07B6  1383               	bcf	3,7	;select IRP bank0
   445     07B7  0800               	movf	0,w
   446     07B8  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   447     07BD                     l721:
   448                           
   449                           ;task.c: 45:      _delay((unsigned long)((100)*(6000000/4000.0)));
   450     07BD  30C3               	movlw	195
   451     07BE  00F6               	movwf	??_main+1
   452     07BF  30CD               	movlw	205
   453     07C0  00F5               	movwf	??_main
   454     07C1                     u77:
   455     07C1  0BF5               	decfsz	??_main,f
   456     07C2  2FC1               	goto	u77
   457     07C3  0BF6               	decfsz	??_main+1,f
   458     07C4  2FC1               	goto	u77
   459     07C5                     l723:
   460                           
   461                           ;task.c: 46:      lcddata(array[j]);
   462     07C5  0877               	movf	_j,w
   463     07C6  3E20               	addlw	(low (_array| 0))& (0+255)
   464     07C7  0084               	movwf	4
   465     07C8  1383               	bcf	3,7	;select IRP bank0
   466     07C9  0800               	movf	0,w
   467     07CA  120A  118A  2710  120A  118A  	fcall	_lcddata
   468                           
   469                           ;task.c: 48:       _delay((unsigned long)((100)*(6000000/4000.0)));
   470     07CF  30C3               	movlw	195
   471     07D0  00F6               	movwf	??_main+1
   472     07D1  30CD               	movlw	205
   473     07D2  00F5               	movwf	??_main
   474     07D3                     u87:
   475     07D3  0BF5               	decfsz	??_main,f
   476     07D4  2FD3               	goto	u87
   477     07D5  0BF6               	decfsz	??_main+1,f
   478     07D6  2FD3               	goto	u87
   479     07D7                     l725:
   480                           
   481                           ;task.c: 49:     }
   482     07D7  3001               	movlw	1
   483     07D8  00FF               	movwf	btemp+1
   484     07D9  087F               	movf	btemp+1,w
   485     07DA  07F7               	addwf	_j,f
   486     07DB                     l727:
   487     07DB  3006               	movlw	6
   488     07DC  0277               	subwf	_j,w
   489     07DD  1C03               	skipc
   490     07DE  2FE0               	goto	u41
   491     07DF  2FE1               	goto	u40
   492     07E0                     u41:
   493     07E0  2FB3               	goto	l719
   494     07E1                     u40:
   495     07E1                     l729:
   496                           
   497                           ;task.c: 51:       {;task.c: 52:       lcdcmd(0x1F);
   498     07E1  301F               	movlw	31
   499     07E2  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   500     07E7  2FE1               	goto	l729
   501     07E8  120A  118A  2800   	ljmp	start
   502     07EB                     __end_of_main:
   503                           
   504                           	psect	text1
   505     0710                     __ptext1:	
   506 ;; *************** function _lcddata *****************
   507 ;; Defined at:
   508 ;;		line 79 in file "task.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;  i               1    wreg     unsigned char 
   511 ;; Auto vars:     Size  Location     Type
   512 ;;  i               1    2[COMMON] unsigned char 
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       0       0       0       0
   523 ;;      Locals:         1       0       0       0       0
   524 ;;      Temps:          2       0       0       0       0
   525 ;;      Totals:         3       0       0       0       0
   526 ;;Total ram usage:        3 bytes
   527 ;; Hardware stack levels used: 1
   528 ;; This function calls:
   529 ;;		Nothing
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535     0710                     _lcddata:	
   536                           ;psect for function _lcddata
   537                           
   538                           
   539                           ;incstack = 0
   540                           ; Regs used in _lcddata: [wreg]
   541                           ;lcddata@i stored from wreg
   542     0710  00F2               	movwf	lcddata@i
   543     0711                     l687:
   544                           
   545                           ;task.c: 79: void lcddata(unsigned char i);task.c: 80: {;task.c: 81:     RC3=1;
   546     0711  1283               	bcf	3,5	;RP0=0, select bank0
   547     0712  1303               	bcf	3,6	;RP1=0, select bank0
   548     0713  1587               	bsf	7,3	;volatile
   549     0714                     l689:
   550                           
   551                           ;task.c: 82:     PORTD=i;
   552     0714  0872               	movf	lcddata@i,w
   553     0715  0088               	movwf	8	;volatile
   554     0716                     l691:
   555                           
   556                           ;task.c: 83:     RC0=1;
   557     0716  1407               	bsf	7,0	;volatile
   558                           
   559                           ;task.c: 84:     _delay((unsigned long)((10)*(6000000/4000.0)));
   560     0717  3014               	movlw	20
   561     0718  00F1               	movwf	??_lcddata+1
   562     0719  3079               	movlw	121
   563     071A  00F0               	movwf	??_lcddata
   564     071B                     u97:
   565     071B  0BF0               	decfsz	??_lcddata,f
   566     071C  2F1B               	goto	u97
   567     071D  0BF1               	decfsz	??_lcddata+1,f
   568     071E  2F1B               	goto	u97
   569     071F  2F20               	nop2
   570     0720                     l693:
   571                           
   572                           ;task.c: 85:     RC0=0;
   573     0720  1283               	bcf	3,5	;RP0=0, select bank0
   574     0721  1303               	bcf	3,6	;RP1=0, select bank0
   575     0722  1007               	bcf	7,0	;volatile
   576                           
   577                           ;task.c: 86:     _delay((unsigned long)((10)*(6000000/4000.0)));
   578     0723  3014               	movlw	20
   579     0724  00F1               	movwf	??_lcddata+1
   580     0725  3079               	movlw	121
   581     0726  00F0               	movwf	??_lcddata
   582     0727                     u107:
   583     0727  0BF0               	decfsz	??_lcddata,f
   584     0728  2F27               	goto	u107
   585     0729  0BF1               	decfsz	??_lcddata+1,f
   586     072A  2F27               	goto	u107
   587     072B  2F2C               	nop2
   588     072C                     l51:
   589     072C  0008               	return
   590     072D                     __end_of_lcddata:
   591                           
   592                           	psect	text2
   593     074B                     __ptext2:	
   594 ;; *************** function _init *****************
   595 ;; Defined at:
   596 ;;		line 55 in file "task.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, status,2, status,0, pclath, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   610 ;;      Params:         0       0       0       0       0
   611 ;;      Locals:         0       0       0       0       0
   612 ;;      Temps:          2       0       0       0       0
   613 ;;      Totals:         2       0       0       0       0
   614 ;;Total ram usage:        2 bytes
   615 ;; Hardware stack levels used: 1
   616 ;; Hardware stack levels required when called: 1
   617 ;; This function calls:
   618 ;;		_lcdcmd
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624     074B                     _init:	
   625                           ;psect for function _init
   626                           
   627     074B                     l671:	
   628                           ;incstack = 0
   629                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   630                           
   631                           
   632                           ;task.c: 57:     TRISC=0x00;
   633     074B  1683               	bsf	3,5	;RP0=1, select bank1
   634     074C  1303               	bcf	3,6	;RP1=0, select bank1
   635     074D  0187               	clrf	7	;volatile
   636                           
   637                           ;task.c: 58:     TRISD=0x00;
   638     074E  0188               	clrf	8	;volatile
   639     074F                     l673:
   640                           
   641                           ;task.c: 59:     lcdcmd(0x30);
   642     074F  3030               	movlw	48
   643     0750  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   644     0755                     l675:
   645                           
   646                           ;task.c: 61:     _delay((unsigned long)((100)*(6000000/4000.0)));
   647     0755  30C3               	movlw	195
   648     0756  00F4               	movwf	??_init+1
   649     0757  30CD               	movlw	205
   650     0758  00F3               	movwf	??_init
   651     0759                     u117:
   652     0759  0BF3               	decfsz	??_init,f
   653     075A  2F59               	goto	u117
   654     075B  0BF4               	decfsz	??_init+1,f
   655     075C  2F59               	goto	u117
   656     075D                     l677:
   657                           
   658                           ;task.c: 62:      lcdcmd(0x30);
   659     075D  3030               	movlw	48
   660     075E  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   661     0763                     l679:
   662                           
   663                           ;task.c: 64:     _delay((unsigned long)((100)*(6000000/4000.0)));
   664     0763  30C3               	movlw	195
   665     0764  00F4               	movwf	??_init+1
   666     0765  30CD               	movlw	205
   667     0766  00F3               	movwf	??_init
   668     0767                     u127:
   669     0767  0BF3               	decfsz	??_init,f
   670     0768  2F67               	goto	u127
   671     0769  0BF4               	decfsz	??_init+1,f
   672     076A  2F67               	goto	u127
   673     076B                     l681:
   674                           
   675                           ;task.c: 65:      lcdcmd(0x30);
   676     076B  3030               	movlw	48
   677     076C  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   678     0771                     l683:
   679                           
   680                           ;task.c: 67:      lcdcmd(0x38);
   681     0771  3038               	movlw	56
   682     0772  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   683     0777                     l685:
   684                           
   685                           ;task.c: 68:      lcdcmd(0x0C);
   686     0777  300C               	movlw	12
   687     0778  120A  118A  26F3  120A  118A  	fcall	_lcdcmd
   688     077D                     l45:
   689     077D  0008               	return
   690     077E                     __end_of_init:
   691                           
   692                           	psect	text3
   693     06F3                     __ptext3:	
   694 ;; *************** function _lcdcmd *****************
   695 ;; Defined at:
   696 ;;		line 70 in file "task.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  i               1    wreg     unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  i               1    2[COMMON] unsigned char 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   710 ;;      Params:         0       0       0       0       0
   711 ;;      Locals:         1       0       0       0       0
   712 ;;      Temps:          2       0       0       0       0
   713 ;;      Totals:         3       0       0       0       0
   714 ;;Total ram usage:        3 bytes
   715 ;; Hardware stack levels used: 1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_main
   720 ;;		_init
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724     06F3                     _lcdcmd:	
   725                           ;psect for function _lcdcmd
   726                           
   727                           
   728                           ;incstack = 0
   729                           ; Regs used in _lcdcmd: [wreg]
   730                           ;lcdcmd@i stored from wreg
   731     06F3  00F2               	movwf	lcdcmd@i
   732     06F4                     l663:
   733                           
   734                           ;task.c: 70: void lcdcmd(unsigned char i);task.c: 71: {;task.c: 72:     RC3=0;
   735     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   736     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   737     06F6  1187               	bcf	7,3	;volatile
   738     06F7                     l665:
   739                           
   740                           ;task.c: 73:     PORTD=i;
   741     06F7  0872               	movf	lcdcmd@i,w
   742     06F8  0088               	movwf	8	;volatile
   743     06F9                     l667:
   744                           
   745                           ;task.c: 74:     RC0=1;
   746     06F9  1407               	bsf	7,0	;volatile
   747                           
   748                           ;task.c: 75:     _delay((unsigned long)((10)*(6000000/4000.0)));
   749     06FA  3014               	movlw	20
   750     06FB  00F1               	movwf	??_lcdcmd+1
   751     06FC  3079               	movlw	121
   752     06FD  00F0               	movwf	??_lcdcmd
   753     06FE                     u137:
   754     06FE  0BF0               	decfsz	??_lcdcmd,f
   755     06FF  2EFE               	goto	u137
   756     0700  0BF1               	decfsz	??_lcdcmd+1,f
   757     0701  2EFE               	goto	u137
   758     0702  2F03               	nop2
   759     0703                     l669:
   760                           
   761                           ;task.c: 76:     RC0=0;
   762     0703  1283               	bcf	3,5	;RP0=0, select bank0
   763     0704  1303               	bcf	3,6	;RP1=0, select bank0
   764     0705  1007               	bcf	7,0	;volatile
   765                           
   766                           ;task.c: 77:     _delay((unsigned long)((10)*(6000000/4000.0)));
   767     0706  3014               	movlw	20
   768     0707  00F1               	movwf	??_lcdcmd+1
   769     0708  3079               	movlw	121
   770     0709  00F0               	movwf	??_lcdcmd
   771     070A                     u147:
   772     070A  0BF0               	decfsz	??_lcdcmd,f
   773     070B  2F0A               	goto	u147
   774     070C  0BF1               	decfsz	??_lcdcmd+1,f
   775     070D  2F0A               	goto	u147
   776     070E  2F0F               	nop2
   777     070F                     l48:
   778     070F  0008               	return
   779     0710                     __end_of_lcdcmd:
   780     007E                     btemp	set	126	;btemp
   781     007E                     wtemp0	set	126
   782                           
   783                           	psect	config
   784                           
   785                           ;Config register CONFIG @ 0x2007
   786                           ;	Oscillator Selection bits
   787                           ;	FOSC = EXTRC, RC oscillator
   788                           ;	Watchdog Timer Enable bit
   789                           ;	WDTE = OFF, WDT disabled
   790                           ;	Power-up Timer Enable bit
   791                           ;	PWRTE = OFF, PWRT disabled
   792                           ;	Brown-out Reset Enable bit
   793                           ;	BOREN = OFF, BOR disabled
   794                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   795                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   796                           ;	Data EEPROM Memory Code Protection bit
   797                           ;	CPD = OFF, Data EEPROM code protection off
   798                           ;	Flash Program Memory Write Enable bits
   799                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   800                           ;	In-Circuit Debugger Mode bit
   801                           ;	DEBUG = 0x1, unprogrammed default
   802                           ;	Flash Program Memory Code Protection bit
   803                           ;	CP = OFF, Code protection off
   804     2007                     	org	8199
   805     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        30
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      0      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_lcdcmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      66
                                              5 COMMON     2     2      0
                               _init
                             _lcdcmd
                            _lcddata
 ---------------------------------------------------------------------------------
 (1) _lcddata                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (1) _lcdcmd                                               3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _lcdcmd
   _lcdcmd
   _lcddata

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      28      12        0.0%
ABS                  0      0      28       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Dec 22 15:18:55 2023

                      _i 0078                        _j 0077                        _x 0079  
                      pc 0002                       l51 072C                       l45 077D  
                     l48 070F                       u30 07B2                       u31 07B1  
                     u40 07E1                       u41 07E0                       u57 0792  
                     u67 07A4                       u77 07C1                       u87 07D3  
                     u97 071B                       fsr 0004                      l711 07AC  
                    l703 0784                      l721 07BD                      l713 07B2  
                    l705 078E                      l723 07C5                      l707 0796  
                    l725 07D7                      l709 07A8                      l663 06F4  
                    l671 074B                      l727 07DB                      l719 07B3  
                    l665 06F7                      l681 076B                      l673 074F  
                    l729 07E1                      l667 06F9                      l683 0771  
                    l675 0755                      l691 0716                      l669 0703  
                    l685 0777                      l677 075D                      l693 0720  
                    l679 0763                      l687 0711                      l695 077E  
                    l689 0714                      l697 0783                      _RC0 0038  
                    _RC3 003B                      u107 0727                      u117 0759  
                    u127 0767                      u137 06FE                      u147 070A  
                    fsr0 0004                      indf 0000                     _cmd1 0038  
                   _cmd2 0032                     _main 077E                     _init 074B  
                   btemp 007E                     start 0000                    ?_main 0070  
                  ?_init 0070                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088          __end_of_lcddata 072D                    _array 0020  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07EB             __end_of_main 07EB             __end_of_init 077E  
                 ??_main 0075                   ??_init 0073                   _lcdcmd 06F3  
              ??_lcddata 0070  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 072D               __pmaintext 077E                  ?_lcdcmd 0070  
                __ptext1 0710                  __ptext2 074B                  __ptext3 06F3  
                _lcddata 0710                  lcdcmd@i 0072     end_of_initialization 07FC  
         __end_of_lcdcmd 0710      start_initialization 07EB               init_fetch0 06E0  
               ??_lcdcmd 0070              __pdataBANK0 0020              __pbssCOMMON 0077  
              ___latbits 0002                 ?_lcddata 0070                 lcddata@i 0072  
               init_ram0 06E4  
